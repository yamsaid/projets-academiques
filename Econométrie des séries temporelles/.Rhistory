main = "Résidus vs valeurs ajustées")
abline(h=0, col="red", lwd=2)
hist(residus, breaks=20, main="Histogramme des résidus", xlab="Résidus")
##Vérification de l’autocorrélation (test de Durbin-Watson):                     install.packages("lmtest")
library(lmtest)
dwtest(model_var)
##Vérification de l’autocorrélation (test de Durbin-Watson):                     install.packages("lmtest")
library(lmtest)
dwtest(model_var)
# Test de normalité (Jarque-Bera)
normality.test(model_var)
# Test de normalité (Jarque-Bera)
normality.test(residus)
# Test de normalité (Jarque-Bera)
normality.test(residuals(model_var))
# Test de normalité (Jarque-Bera)
normality.test(model_var)
library(vars)
library(ggplot2)
library(gridExtra)
# Estimer le modèle VAR
model_var <- VAR(tsdflog, p = 1, type = "const")
adf.test(residus)
library(vars)
library(ggplot2)
library(gridExtra)
# Estimer le modèle VAR
# Extraire les résidus
resids <- residuals(model_var)
# Fonction pour tracer histogramme + QQ-plot d’une variable résiduelle
plot_resid_normality <- function(resid_vector, var_name) {
p1 <- ggplot(data.frame(resid = resid_vector), aes(x = resid)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
geom_density(color = "red", size = 1) +
ggtitle(paste("Histogramme des résidus -", var_name))
p2 <- ggplot(data.frame(resid = resid_vector), aes(sample = resid)) +
stat_qq() + stat_qq_line(color = "red") +
ggtitle(paste("QQ-plot des résidus -", var_name))
grid.arrange(p1, p2, ncol = 2)
}
# Appliquer la fonction à chaque variable résiduelle
for (varname in colnames(resids)) {
plot_resid_normality(resids[, varname], varname)
}
model_var <- VAR(tsdflog[-c(1,3)], p = 1, type = "const")
#coef(model_var$varresult$production)
summary(model_var$varresult$production)
library(vars)
library(ggplot2)
library(gridExtra)
# Estimer le modèle VAR
# Extraire les résidus
resids <- residuals(model_var)
# Fonction pour tracer histogramme + QQ-plot d’une variable résiduelle
plot_resid_normality <- function(resid_vector, var_name) {
p1 <- ggplot(data.frame(resid = resid_vector), aes(x = resid)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
geom_density(color = "red", size = 1) +
ggtitle(paste("Histogramme des résidus -", var_name))
p2 <- ggplot(data.frame(resid = resid_vector), aes(sample = resid)) +
stat_qq() + stat_qq_line(color = "red") +
ggtitle(paste("QQ-plot des résidus -", var_name))
grid.arrange(p1, p2, ncol = 2)
}
# Appliquer la fonction à chaque variable résiduelle
for (varname in colnames(resids)) {
plot_resid_normality(resids[, varname], varname)
}
model_var <- VAR(tsdflog[-c(1,4)], p = 1, type = "const")
#coef(model_var$varresult$production)
summary(model_var$varresult$production)
library(vars)
library(ggplot2)
library(gridExtra)
# Estimer le modèle VAR
# Extraire les résidus
resids <- residuals(model_var)
# Fonction pour tracer histogramme + QQ-plot d’une variable résiduelle
plot_resid_normality <- function(resid_vector, var_name) {
p1 <- ggplot(data.frame(resid = resid_vector), aes(x = resid)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "skyblue", color = "black") +
geom_density(color = "red", size = 1) +
ggtitle(paste("Histogramme des résidus -", var_name))
p2 <- ggplot(data.frame(resid = resid_vector), aes(sample = resid)) +
stat_qq() + stat_qq_line(color = "red") +
ggtitle(paste("QQ-plot des résidus -", var_name))
grid.arrange(p1, p2, ncol = 2)
}
# Appliquer la fonction à chaque variable résiduelle
for (varname in colnames(resids)) {
plot_resid_normality(resids[, varname], varname)
}
# Test de normalité (Jarque-Bera)
jb_test <- normality.test(model_var)
# Affichage des résultats
print(jb_test)
d<-tsdflog[c(1,2,3)]
dfp <- tsdflog %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(df_long, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
d<-tsdflog[c(1,2,3)]
dfp <- d %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(df_long, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
plot(d, main = "Production vs Pluie", col = c("blue", "darkgreen"))
ts_data <- ts(cbind(prod, pluie), start = 1990)
plot(d, main = "Production vs Pluie", col = c("blue", "darkgreen"))
ts_data <- ts(cbind(production, prix), start = 1990)
plot(d, main = "Production vs Pluie", col = c("blue", "darkgreen"))
d<-tsdflog[c(1,2,3)]
dfp <- d
d<-tsdflog[c(1,2,3)]
dfp <- d %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(df_long, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
d
dfp <- d %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(dfp, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
d<-tsdflog[c(1,2,4)]
d<-tsdflog[c(1,2,3)]
dfp <- d %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(df_long, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
d<-tsdflog[c(1,2,4)]
dfp <- d %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(df_long, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
d<-tsdflog[c(1,2,4)]
dfp <- d %>%
pivot_longer(-date, names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(dfp, aes(x = date, y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
residus
res=data.frame(residus)
res <- ts(res, start = 1990)
d<-res[c(1,2)]
dfp <- d %>%
pivot_longer( names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(dfp, aes( y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
d<-res[c(1,2)]
dfp <- d %>%
pivot_longer( names_to = "Variable", values_to = "Valeur")
# Tracé avec ggplot2
ggplot(dfp, aes(x = ., y = Valeur, color = Variable)) +
geom_line(size = 1) +
labs(title = "Évolution des séries temporelles", x = "Date", y = "Valeur") +
theme_minimal() +
theme(legend.position = "bottom")
res=data.frame(residus)
res <- ts(res, start = 1990)
res
# Prévisions sur 10 périodes
forecast_var <- predict(model_var, n.ahead = 10, ci = 0.95)
library(knitr)
# Extraction
prod_forecast <- forecast_var$fcst$production
# Affichage du tableau avec 3 décimales
kable(prod_forecast, digits = 3, caption = "Prévisions de la production (log)")
library(knitr)
# Extraction
prod_forecast <- forecast_var$fcst$production
# Affichage du tableau avec 3 décimales
knitr::kable(prod_forecast, digits = 3, caption = "Prévisions de la production (log)")
# Ajouter une colonne avec les prévisions en niveau
prod_forecast_df <- as.data.frame(prod_forecast)
prod_forecast_df$fcst_exp <- exp(prod_forecast_df$fcst)
prod_forecast_df$lower_exp <- exp(prod_forecast_df$lower)
prod_forecast_df$upper_exp <- exp(prod_forecast_df$upper)
# Afficher
kable(prod_forecast_df, digits = 3, caption = "Prévisions de la production (niveau)")
library(readr)
library(vars)
# Effectuer le test ADF
library(tseries)
library(tsibble)
library(dplyr)
library(tidyr)
library(purrr)
library(knitr)
library(vars)
df <- read_delim(
"seriTemp.csv",
delim = ";",  # ou "," si c'est un CSV standard
locale = locale(
date_format = "%d/%m/%Y",  # format jour/mois/année
decimal_mark = ","         # virgule comme séparateur décimal
),
col_types = cols(
date = col_date(format = "%d/%m/%Y"),  # conversion directe en Date
production = col_number(),
superficie = col_number(),
precipitation = col_number(),
subvention = col_number(),
prix = col_number(),
)
dff1 <- data.frame(
production = diff(ts_df$production),
precipitation = diff(ts_df$precipitation),
prix = diff(ts_df$prix),
subvention =diff(ts_df$subvention),
superficie = diff(ts_df$superficie)
)
dff2 <- data.frame(
date = df$date[-c(1,2)],
production = diff(dff1$production),
precipitation = diff(dff1$precipitation),
prix = diff(dff1$prix),
subvention =diff(dff1$subvention),
superficie = diff(dff1$superficie)
)
library(forecast)
library(tseries)
library(ggplot2)
prod_ts <- ts(dff2$production, start = 1990)
# Variables explicatives comme matrice
xreg <- as.matrix(dff2[, c("superficie", "subvention", "prix","precipitation")])
# Test de stationnarité (facultatif mais utile)
adf.test(prod_ts)
# Identification automatique (tu peux fixer manuellement p,d,q aussi)
auto_model <- auto.arima(prod_ts, xreg = xreg)
summary(auto_model)
model_arimax <- Arima(prod_ts, order = c(1,1,1), xreg = xreg)
summary(model_arimax)
checkresiduals(model_arimax)
# Normalité des résidus (Jarque-Bera par exemple)
tseries::jarque.bera.test(residuals(model_arimax))
car::vif(lm(production ~ superficie+ subvention+prix+recipitation))
car::vif(lm(production ~ superficie+ subvention+prix+recipitation,data=dff2))
car::vif(lm(production ~ superficie+ subvention+prix+precipitation,data=dff2))
checkresiduals(model_arimax)
Box.test(residuals(model_arimax), lag = 10, type = "Ljung-Box")
tseries::jarque.bera.test(residuals(model_arimax))
# Identification automatique (tu peux fixer manuellement p,d,q aussi)
auto_model <- auto.arima(prod_ts, xreg = xreg)
summary(auto_model)
# Identification automatique (tu peux fixer manuellement p,d,q aussi)
auto_model <- auto.arima(prod_ts, xreg = xreg, D=2)
summary(auto_model)
acf(diff(dff2$production))
pacf(diff(dff2$production))
acf(diff(dff2$production))
pacf(diff(dff2$production))
best_aic <- Inf
best_order <- c(0, 0, 0)
for (p in 0:3) {
for (q in 0:3) {
model <- try(Arima(df$production, order = c(p, d, q), xreg = df[, c("precip", "prix_export", "subvention")]), silent = TRUE)
if (class(model) != "try-error") {
if (AIC(model) < best_aic) {
best_aic <- AIC(model)
best_order <- c(p, d, q)
}
best_order
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg, silent = TRUE)
p=1
q=0
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg, silent = TRUE)
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
model_arimax <- Arima(prod_ts, order = c(1,2,0), xreg = xreg)
summary(model_arimax)
odel_arimax <- Arimax(prod_ts, order = c(1,2,0), xreg = xreg)
checkresiduals(model_arimax)
tseries::jarque.bera.test(residuals(model_arimax))
prod_ts <- ts(dff2$production, start = 1992)
p=1
q=0
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Test de stationnarité (facultatif mais utile)
adf.test(prod_ts)
# Vérification des résidus
checkresiduals(model_arimax)
# Normalité des résidus (Jarque-Bera par exemple)
tseries::jarque.bera.test(residuals(model_arimax))
car::vif(lm(production ~ superficie+ subvention+prix+precipitation,data=dff2))
Box.test(residuals(model_arimax), lag = 10, type = "Ljung-Box")
?jarque.bera.test
checkresiduals(model_arimax) #tre non autocorrélés (test de Ljung-Box),
Box.test(residuals(model_arimax), lag = 10, type = "Ljung-Box") #être homoscédastiques (variance constante),
tseries::jarque.bera.test(residuals(model_arimax)) #idéalement gaussiens (Jarque-Bera ou test de Shapiro-Wilk).
# ou manuellement
acf(residuals(model_arimax))
pacf(residuals(model_arimax))
model_arimax <- Arima(prod_ts, order = c(1,2,1), xreg = xreg)
summary(model_arimax)
# Vérification des résidus
checkresiduals(model_arimax)
# Test de stationnarité (facultatif mais utile)
adf.test(prod_ts)
# Test de stationnarité (facultatif mais utile)
adf.test(prod_ts)
prod_ts <- ts(dff2, start = 1992)
# Test de stationnarité (facultatif mais utile)
adf.test(prod_ts)
# Test de stationnarité (facultatif mais utile)
adf.test(prod_ts$prix)
prod_ts <- ts(dff2$production, start = 1992)
# Test de stationnarité (facultatif mais utile)
adf.test(dff2$precipitation)
p=2
q=0
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model_arimax)
p=2
q=1
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model_arimax)
p=1
q=1
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model_arimax)
p=1
q=1
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model)
p=1
q=2
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model)
# Normalité des résidus (Jarque-Bera par exemple)
tseries::jarque.bera.test(residuals(model_arimax))
Box.test(residuals(model_arimax), lag = 10, type = "Ljung-Box") #être homoscédastiques (variance constante),
p=1
q=0
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model)
p=1
q=1
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model)
p=1
q=2
d=2
model <- Arima(dff2$production, order = c(p, d, q), xreg = xreg)
summary(model)
# Vérification des résidus
checkresiduals(model)
summary(model)
resumer_adf <- function(serie, nom_var) {
test <- adf.test(na.omit(serie))
p_valeur <- test$p.value
statut <- ifelse(p_valeur < 0.05, "Stationnaire", "Non stationnaire")
interpretation <- ifelse(
statut == "Stationnaire",
"La variable est stationnaire au seuil de 5% )",
"La variable est non stationnaire au seuil 5% , une différenciation est nécessaire"
)
return(data.frame(Variable = nom_var,
P_Value = round(p_valeur, 4),
Statut = statut,
Interpretation = interpretation))
}
prod_ts <- ts(dff2$production, start = 1992)
xreg <- as.matrix(dff2[, c("superficie", "subvention", "prix","precipitation")])
acf(residuals(prod_ts))
#| echo: False
xreg <- as.matrix(dff2[, c("superficie", "subvention", "prix","precipitation")])
model<-Arima(dff2$production, order = c(1, 2, 2), xreg = xreg)
#| echo: False
xreg <- as.matrix(dff2[, c("superficie", "subvention", "prix","precipitation")])
model<-Arima(dff2$production, order = c(1, 2, 2), xreg = xreg)
sammury(model)
#| echo: False
xreg <- as.matrix(dff2[, c("superficie", "subvention", "prix","precipitation")])
model<-Arima(dff2$production, order = c(1, 2, 2), xreg = xreg)
summary(model)
#| echo: False
. #Tracer ACF et PACF
par(mfrow = c(1, 2))  # deux graphiques côte à côte
acf(model, main = "ACF")
pacf(model, main = "PACF")
#| echo: False
. #Tracer ACF et PACF
par(mfrow = c(1, 2))  # deux graphiques côte à côte
acf(dff2$production, main = "ACF")
pacf(dff2$production, main = "PACF")
#| echo: False
. #Tracer ACF et PACF
par(mfrow = c(1, 2))  # deux graphiques côte à côte
acf(dff2$production, main = "ACF")
pacf(dff2$production,main="PACF")
#| echo: False
#Tracer ACF et PACF
par(mfrow = c(1, 2))  # deux graphiques côte à côte
acf(dff2$production, main = "ACF")
pacf(dff2$production, main= "PACF")
tseries::jarque.bera.test(residuals(model))
Box.test(residuals(model), lag = 10, type = "Ljung-Box")
checkresiduals(model)
model1<-Arima(dff2$production, order = c(1, 2, 1), xreg = xreg)
checkresiduals(model1)
model2<-Arima(dff2$production, order = c(1, 2, 0), xreg = xreg)
checkresiduals(model2)
summary(model)
# Prévision sur 5 ans (2024 à 2028) : valeurs simulées
newxreg <- data.frame(
superficie = c(700000, 710000, 720000, 730000, 740000),      # en hectares
subvention = c(15000, 15500, 16000, 16200, 16500),           # en millions CFA
prix = c(100, 102, 104, 105, 107),                           # en FCFA/kg
precipitation = c(900, 920, 910, 930, 940)                   # en mm
)
# Prédire les 5 prochaines valeurs de la production
forecast_arimax <- predict(model, n.ahead = 5, newxreg = newxreg)
# Affichage des prévisions
forecast_arimax$pred       # Prévision de la production
forecast_arimax$se         # Erreur standard associée
# Graphique des prévisions
ts.plot(y, forecast_arimax$pred, col = c("black", "blue"), lty = c(1, 2))
legend("topleft", legend = c("Production observée", "Prévision ARIMAX"), col = c("black", "blue"), lty = c(1, 2))
# Graphique des prévisions
ts.plot(newxreg, forecast_arimax$pred, col = c("black", "blue"), lty = c(1, 2))
legend("topleft", legend = c("Production observée", "Prévision ARIMAX"), col = c("black", "blue"), lty = c(1, 2))
#| echo: False
#Tracer ACF et PACF
par(mfrow = c(1, 2))  # deux graphiques côte à côte
acf(dff2$production, main = "ACF")
pacf(dff2$production, main= "PACF")
#| echo: False
# Importation des packages necessaires :
library(readr)
library(vars)
# Effectuer le test ADF
library(tseries)
library(tsibble)
library(dplyr)
library(tidyr)
library(purrr)
library(knitr)
library(vars)
#| echo: False
# Importation des packages necessaires :
library(readr)
library(vars)
# Effectuer le test ADF
library(tseries)
library(tsibble)
library(dplyr)
library(tidyr)
library(purrr)
library(knitr)
library(vars)
library(ggplot2)
library(forecast)
library(tseries)
#| echo: False
xreg <- as.matrix(dff2[, c("superficie", "subvention", "prix","precipitation")])
model<-Arima(dff2$production, order = c(1, 2, 2), xreg = xreg)
summary(model)
